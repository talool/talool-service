/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.talool.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Address implements org.apache.thrift.TBase<Address, Address._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Address");

  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ADDRESS1_FIELD_DESC = new org.apache.thrift.protocol.TField("address1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ADDRESS2_FIELD_DESC = new org.apache.thrift.protocol.TField("address2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_PROVINCE_COUNTY_FIELD_DESC = new org.apache.thrift.protocol.TField("stateProvinceCounty", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ZIP_FIELD_DESC = new org.apache.thrift.protocol.TField("zip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.I64, (short)9);

  public long addressId; // required
  public String address1; // required
  public String address2; // required
  public String city; // required
  public String stateProvinceCounty; // required
  public String zip; // required
  public String country; // required
  public long created; // required
  public long updated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS_ID((short)1, "addressId"),
    ADDRESS1((short)2, "address1"),
    ADDRESS2((short)3, "address2"),
    CITY((short)4, "city"),
    STATE_PROVINCE_COUNTY((short)5, "stateProvinceCounty"),
    ZIP((short)6, "zip"),
    COUNTRY((short)7, "country"),
    CREATED((short)8, "created"),
    UPDATED((short)9, "updated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS_ID
          return ADDRESS_ID;
        case 2: // ADDRESS1
          return ADDRESS1;
        case 3: // ADDRESS2
          return ADDRESS2;
        case 4: // CITY
          return CITY;
        case 5: // STATE_PROVINCE_COUNTY
          return STATE_PROVINCE_COUNTY;
        case 6: // ZIP
          return ZIP;
        case 7: // COUNTRY
          return COUNTRY;
        case 8: // CREATED
          return CREATED;
        case 9: // UPDATED
          return UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADDRESSID_ISSET_ID = 0;
  private static final int __CREATED_ISSET_ID = 1;
  private static final int __UPDATED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADDRESS1, new org.apache.thrift.meta_data.FieldMetaData("address1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS2, new org.apache.thrift.meta_data.FieldMetaData("address2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE_PROVINCE_COUNTY, new org.apache.thrift.meta_data.FieldMetaData("stateProvinceCounty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP, new org.apache.thrift.meta_data.FieldMetaData("zip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Address.class, metaDataMap);
  }

  public Address() {
  }

  public Address(
    long addressId,
    String address1,
    String address2,
    String city,
    String stateProvinceCounty,
    String zip,
    String country,
    long created,
    long updated)
  {
    this();
    this.addressId = addressId;
    setAddressIdIsSet(true);
    this.address1 = address1;
    this.address2 = address2;
    this.city = city;
    this.stateProvinceCounty = stateProvinceCounty;
    this.zip = zip;
    this.country = country;
    this.created = created;
    setCreatedIsSet(true);
    this.updated = updated;
    setUpdatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Address(Address other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.addressId = other.addressId;
    if (other.isSetAddress1()) {
      this.address1 = other.address1;
    }
    if (other.isSetAddress2()) {
      this.address2 = other.address2;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetStateProvinceCounty()) {
      this.stateProvinceCounty = other.stateProvinceCounty;
    }
    if (other.isSetZip()) {
      this.zip = other.zip;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    this.created = other.created;
    this.updated = other.updated;
  }

  public Address deepCopy() {
    return new Address(this);
  }

  public void clear() {
    setAddressIdIsSet(false);
    this.addressId = 0;
    this.address1 = null;
    this.address2 = null;
    this.city = null;
    this.stateProvinceCounty = null;
    this.zip = null;
    this.country = null;
    setCreatedIsSet(false);
    this.created = 0;
    setUpdatedIsSet(false);
    this.updated = 0;
  }

  public long getAddressId() {
    return this.addressId;
  }

  public Address setAddressId(long addressId) {
    this.addressId = addressId;
    setAddressIdIsSet(true);
    return this;
  }

  public void unsetAddressId() {
    __isset_bit_vector.clear(__ADDRESSID_ISSET_ID);
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return __isset_bit_vector.get(__ADDRESSID_ISSET_ID);
  }

  public void setAddressIdIsSet(boolean value) {
    __isset_bit_vector.set(__ADDRESSID_ISSET_ID, value);
  }

  public String getAddress1() {
    return this.address1;
  }

  public Address setAddress1(String address1) {
    this.address1 = address1;
    return this;
  }

  public void unsetAddress1() {
    this.address1 = null;
  }

  /** Returns true if field address1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress1() {
    return this.address1 != null;
  }

  public void setAddress1IsSet(boolean value) {
    if (!value) {
      this.address1 = null;
    }
  }

  public String getAddress2() {
    return this.address2;
  }

  public Address setAddress2(String address2) {
    this.address2 = address2;
    return this;
  }

  public void unsetAddress2() {
    this.address2 = null;
  }

  /** Returns true if field address2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress2() {
    return this.address2 != null;
  }

  public void setAddress2IsSet(boolean value) {
    if (!value) {
      this.address2 = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Address setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getStateProvinceCounty() {
    return this.stateProvinceCounty;
  }

  public Address setStateProvinceCounty(String stateProvinceCounty) {
    this.stateProvinceCounty = stateProvinceCounty;
    return this;
  }

  public void unsetStateProvinceCounty() {
    this.stateProvinceCounty = null;
  }

  /** Returns true if field stateProvinceCounty is set (has been assigned a value) and false otherwise */
  public boolean isSetStateProvinceCounty() {
    return this.stateProvinceCounty != null;
  }

  public void setStateProvinceCountyIsSet(boolean value) {
    if (!value) {
      this.stateProvinceCounty = null;
    }
  }

  public String getZip() {
    return this.zip;
  }

  public Address setZip(String zip) {
    this.zip = zip;
    return this;
  }

  public void unsetZip() {
    this.zip = null;
  }

  /** Returns true if field zip is set (has been assigned a value) and false otherwise */
  public boolean isSetZip() {
    return this.zip != null;
  }

  public void setZipIsSet(boolean value) {
    if (!value) {
      this.zip = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public Address setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public long getCreated() {
    return this.created;
  }

  public Address setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bit_vector.clear(__CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return __isset_bit_vector.get(__CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bit_vector.set(__CREATED_ISSET_ID, value);
  }

  public long getUpdated() {
    return this.updated;
  }

  public Address setUpdated(long updated) {
    this.updated = updated;
    setUpdatedIsSet(true);
    return this;
  }

  public void unsetUpdated() {
    __isset_bit_vector.clear(__UPDATED_ISSET_ID);
  }

  /** Returns true if field updated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return __isset_bit_vector.get(__UPDATED_ISSET_ID);
  }

  public void setUpdatedIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((Long)value);
      }
      break;

    case ADDRESS1:
      if (value == null) {
        unsetAddress1();
      } else {
        setAddress1((String)value);
      }
      break;

    case ADDRESS2:
      if (value == null) {
        unsetAddress2();
      } else {
        setAddress2((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STATE_PROVINCE_COUNTY:
      if (value == null) {
        unsetStateProvinceCounty();
      } else {
        setStateProvinceCounty((String)value);
      }
      break;

    case ZIP:
      if (value == null) {
        unsetZip();
      } else {
        setZip((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Long)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS_ID:
      return Long.valueOf(getAddressId());

    case ADDRESS1:
      return getAddress1();

    case ADDRESS2:
      return getAddress2();

    case CITY:
      return getCity();

    case STATE_PROVINCE_COUNTY:
      return getStateProvinceCounty();

    case ZIP:
      return getZip();

    case COUNTRY:
      return getCountry();

    case CREATED:
      return Long.valueOf(getCreated());

    case UPDATED:
      return Long.valueOf(getUpdated());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS_ID:
      return isSetAddressId();
    case ADDRESS1:
      return isSetAddress1();
    case ADDRESS2:
      return isSetAddress2();
    case CITY:
      return isSetCity();
    case STATE_PROVINCE_COUNTY:
      return isSetStateProvinceCounty();
    case ZIP:
      return isSetZip();
    case COUNTRY:
      return isSetCountry();
    case CREATED:
      return isSetCreated();
    case UPDATED:
      return isSetUpdated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Address)
      return this.equals((Address)that);
    return false;
  }

  public boolean equals(Address that) {
    if (that == null)
      return false;

    boolean this_present_addressId = true;
    boolean that_present_addressId = true;
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (this.addressId != that.addressId)
        return false;
    }

    boolean this_present_address1 = true && this.isSetAddress1();
    boolean that_present_address1 = true && that.isSetAddress1();
    if (this_present_address1 || that_present_address1) {
      if (!(this_present_address1 && that_present_address1))
        return false;
      if (!this.address1.equals(that.address1))
        return false;
    }

    boolean this_present_address2 = true && this.isSetAddress2();
    boolean that_present_address2 = true && that.isSetAddress2();
    if (this_present_address2 || that_present_address2) {
      if (!(this_present_address2 && that_present_address2))
        return false;
      if (!this.address2.equals(that.address2))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_stateProvinceCounty = true && this.isSetStateProvinceCounty();
    boolean that_present_stateProvinceCounty = true && that.isSetStateProvinceCounty();
    if (this_present_stateProvinceCounty || that_present_stateProvinceCounty) {
      if (!(this_present_stateProvinceCounty && that_present_stateProvinceCounty))
        return false;
      if (!this.stateProvinceCounty.equals(that.stateProvinceCounty))
        return false;
    }

    boolean this_present_zip = true && this.isSetZip();
    boolean that_present_zip = true && that.isSetZip();
    if (this_present_zip || that_present_zip) {
      if (!(this_present_zip && that_present_zip))
        return false;
      if (!this.zip.equals(that.zip))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_updated = true;
    boolean that_present_updated = true;
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (this.updated != that.updated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Address other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Address typedOther = (Address)other;

    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(typedOther.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, typedOther.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress1()).compareTo(typedOther.isSetAddress1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address1, typedOther.address1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress2()).compareTo(typedOther.isSetAddress2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address2, typedOther.address2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateProvinceCounty()).compareTo(typedOther.isSetStateProvinceCounty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateProvinceCounty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateProvinceCounty, typedOther.stateProvinceCounty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZip()).compareTo(typedOther.isSetZip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zip, typedOther.zip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(typedOther.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, typedOther.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(typedOther.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, typedOther.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ADDRESS_ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.addressId = iprot.readI64();
            setAddressIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ADDRESS1
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address1 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ADDRESS2
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.address2 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CITY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.city = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // STATE_PROVINCE_COUNTY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.stateProvinceCounty = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ZIP
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.zip = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // COUNTRY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.country = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CREATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.created = iprot.readI64();
            setCreatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // UPDATED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.updated = iprot.readI64();
            setUpdatedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
    oprot.writeI64(this.addressId);
    oprot.writeFieldEnd();
    if (this.address1 != null) {
      oprot.writeFieldBegin(ADDRESS1_FIELD_DESC);
      oprot.writeString(this.address1);
      oprot.writeFieldEnd();
    }
    if (this.address2 != null) {
      oprot.writeFieldBegin(ADDRESS2_FIELD_DESC);
      oprot.writeString(this.address2);
      oprot.writeFieldEnd();
    }
    if (this.city != null) {
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeString(this.city);
      oprot.writeFieldEnd();
    }
    if (this.stateProvinceCounty != null) {
      oprot.writeFieldBegin(STATE_PROVINCE_COUNTY_FIELD_DESC);
      oprot.writeString(this.stateProvinceCounty);
      oprot.writeFieldEnd();
    }
    if (this.zip != null) {
      oprot.writeFieldBegin(ZIP_FIELD_DESC);
      oprot.writeString(this.zip);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATED_FIELD_DESC);
    oprot.writeI64(this.created);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATED_FIELD_DESC);
    oprot.writeI64(this.updated);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Address(");
    boolean first = true;

    sb.append("addressId:");
    sb.append(this.addressId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("address1:");
    if (this.address1 == null) {
      sb.append("null");
    } else {
      sb.append(this.address1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address2:");
    if (this.address2 == null) {
      sb.append("null");
    } else {
      sb.append(this.address2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateProvinceCounty:");
    if (this.stateProvinceCounty == null) {
      sb.append("null");
    } else {
      sb.append(this.stateProvinceCounty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zip:");
    if (this.zip == null) {
      sb.append("null");
    } else {
      sb.append(this.zip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updated:");
    sb.append(this.updated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (address1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'address1' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

}

